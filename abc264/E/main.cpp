#include <atcoder/all>
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
#include <bits/stdc++.h>

using namespace std;
using namespace atcoder;

// clang-format off
/* accelration */
// 高速バイナリ生成
#pragma GCC target("avx")
#pragma GCC optimize("O3")
#pragma GCC optimize("unroll-loops")

// cin cout の結びつけ解除, stdioと同期しない(入出力非同期化)
// cとstdの入出力を混在させるとバグるので注意
struct Fast {
    Fast() {
        std::cin.tie(0);
        ios::sync_with_stdio(false);
    }
} fast;

/* alias */
using ull = unsigned long long;
using ll = long long;
using vi = vector<int>;
using vl = vector<long>;
using vll = vector<long long>;
using vvi = vector<vi>;
using vvl = vector<vl>;
using vvll = vector<vll>;
using vs = vector<string>;
using pii = pair<int, int>;

/* define short */
#define pb push_back
#define mp make_pair
#define all(obj) (obj).begin(), (obj).end()
#define YESNO(bool) if(bool){cout<<"YES"<<endl;}else{cout<<"NO"<<endl;}
#define yesno(bool) if(bool){cout<<"yes"<<endl;}else{cout<<"no"<<endl;}
#define YesNo(bool) if(bool){cout<<"Yes"<<endl;}else{cout<<"No"<<endl;}

/* REP macro */
#define reps(i, a, n) for (ll i = (a); i < (ll)(n); ++i)
#define rep(i, n) reps(i, 0, n)
#define rrep(i, n) reps(i, 1, n + 1)
#define repd(i, n) for(ll i=n-1;i>=0;i--)
#define rrepd(i, n) for(ll i=n;i>=1;i--)

/* debug */
// 標準エラー出力を含む提出はrejectされる場合もあるので注意
#define debug(x) cerr << "\033[33m(line:" << __LINE__ << ") " << #x << ": " << x << "\033[m" << endl;

// search_length: 走査するベクトル長の上限(先頭から何要素目までを検索対象とするか、1始まりで)
template<typename T>
inline bool vector_finder(std::vector<T> vec, T element, unsigned int search_length) {
    auto itr = std::find(vec.begin(), vec.end(), element);
    size_t index = std::distance(vec.begin(), itr);
    if (index == vec.size() || index >= search_length) { return false; } else { return true; }
}

template<typename T>
inline void print(const vector<T> &v, string s = " ") {
    rep(i, v.size()) cout << v[i] << (i != (ll) v.size() - 1 ? s : "\n");
}

template<typename T, typename S>
inline void print(const pair<T, S> &p) { cout << p.first << " " << p.second << endl; }

template<typename T>
inline void print(const T &x) { cout << x << "\n"; }

template<typename T, typename S>
inline void print(const vector<pair<T, S>> &v) { for (auto &&p: v) print(p); }

// 第一引数と第二引数を比較し、第一引数(a)をより大きい/小さい値に上書き
template<typename T>
inline bool chmin(T &a, const T &b) {
    bool compare = a > b;
    if (a > b) a = b;
    return compare;
}

template<typename T>
inline bool chmax(T &a, const T &b) {
    bool compare = a < b;
    if (a < b) a = b;
    return compare;
}


void solve(long long N, long long M, long long E, std::vector<long long> U, std::vector<long long> V, long long Q,
           std::vector<long long> X) {
    dsu d(N + M);
    reps(i, N, N + M - 1) {
        d.merge(i, i + 1);
    }
    vector<ll> a(E, 0);
    vector<ll> UU(Q, 0);
    vector<ll> VV(Q, 0);
    rep(i, Q) {
//        cout << X[i] - 1 << " : " << UU[3] << endl;
        a[X[i] - 1] = 1;
//        cout << Q - i - 1 << " : " << UU[3] << endl;
        UU[Q - i - 1] = U[X[i] - 1];
//        cout << UU[3] << endl;
        VV[Q - i - 1] = V[X[i] - 1];
//        cout << Q - i - 1 << " " << UU[Q - i - 1] << " " << VV[Q - i - 1] << endl;
//        cout << UU[3] << endl;
    }
//    rep(i, Q) {
//        cout << i << " " << UU[i] << " " << VV[i] << endl;
//    }
    rep(i, E) {
        if (a[i] == 0) {
//            cout << i << endl;
            d.merge(U[i] - 1, V[i] - 1);
        }
    }
    vector<ll> ans;
    rep(i, Q) {
//        vvi xx = d.groups();
//        rep(j, xx.size()) {
//            cout << "[ ";
//            rep(k, xx[j].size()) {
//                cout << xx[j][k] << " ";
//            }
//            cout << "]";
//        }
//        cout << endl;
//        cout << UU[i] << " " << VV[i] << endl;
        ans.pb(d.size(N) - M);
        d.merge(UU[i] - 1, VV[i] - 1);
    }
    vvi xx = d.groups();
//    rep(j, xx.size()) {
//        cout << "[ ";
//        rep(k, xx[j].size()) {
//            cout << xx[j][k] << " ";
//        }
//        cout << "]";
//    }
//    cout << endl;
    repd(i, Q) {
        cout << ans[i] << endl;
    }

}

// Generated by 2.12.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main() {
    long long N;
    (void) std::scanf("%lld", &N);
    long long M;
    (void) std::scanf("%lld", &M);
    long long E;
    (void) std::scanf("%lld", &E);
    std::vector<long long> U(E);
    std::vector<long long> V(E);
    for (int i = 0; i < E; i++) {
        (void) std::scanf("%lld", &U[i]);
        (void) std::scanf("%lld", &V[i]);
    }
    long long Q;
    (void) std::scanf("%lld", &Q);
    std::vector<long long> X(Q);
    for (int i = 0; i < Q; i++) {
        (void) std::scanf("%lld", &X[i]);
    }
    solve(N, M, E, std::move(U), std::move(V), Q, std::move(X));
    return 0;
}
